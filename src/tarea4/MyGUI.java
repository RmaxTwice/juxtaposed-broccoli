/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tarea4;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.bytedeco.javacv.FFmpegFrameGrabber;
import org.bytedeco.javacv.FrameGrabber;

/**
 *
 * @author Rafael Vasquez
 * @author Raquel Escalante
 */
public class MyGUI extends javax.swing.JFrame {

    // Global variables
    private String moviePath;
    private long lengthInTime;
    private final JFileChooser fcOpenMovie;
    private final JFileChooser fcOpenPic;
    private FFmpegFrameGrabber grabber;
    private BufferedImage targetImage;
    private final JLabel targetImageLabel;
    private final JLabel mosaicImageLabel;
    private int numberSamples;
    private int widthBlocks;
    private int heightBlocks;
    private int featuresPerBlockHeight;
    private int featuresPerBlockWidth;
    private int[][] targetImageFeatures;
    private int[][] sampleImagesFeatures;
    
    /**
     * Creates new form MyGUI
     */
    public MyGUI() {
        initComponents();
        
        // Global variables initizalization
        moviePath = "";
        lengthInTime = 0;
        fcOpenMovie = new JFileChooser();
        fcOpenPic = new JFileChooser();
        FileNameExtensionFilter moviesFilter = new FileNameExtensionFilter("Películas: *.mp4, *.wmv, *.mkv, *.avi, *.3gp, *.mov", "mp4", "avi", "mkv", "wmv", "3gp", "mov");
        FileNameExtensionFilter imagesFilter = new FileNameExtensionFilter("Imágenes: *.bmp, *.jpg, *.png", "bmp", "jpg", "png");
        fcOpenMovie.addChoosableFileFilter(moviesFilter);
        fcOpenPic.addChoosableFileFilter(imagesFilter);
        fcOpenMovie.setFileFilter(moviesFilter);
        fcOpenPic.setFileFilter(imagesFilter);
        grabber = new FFmpegFrameGrabber("");
        targetImage = null;
        targetImageLabel = new JLabel();
        mosaicImageLabel = new JLabel();
        numberSamples = 100;
        widthBlocks = 8;
        heightBlocks = 8;
        featuresPerBlockHeight = 2;
        featuresPerBlockWidth = 2;
        targetImageFeatures = new int[1][1];
        sampleImagesFeatures = new int[1][1];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UbicacionPelicula = new javax.swing.JTextField();
        LabeUbicacionlPelicula = new javax.swing.JLabel();
        LabelImagenObjetivo = new javax.swing.JLabel();
        PanelImagenObjetivo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AbrirPelicula = new javax.swing.JToggleButton();
        ElegirImagen = new javax.swing.JButton();
        GenerarMuestras = new javax.swing.JToggleButton();
        GenerarMosaico = new javax.swing.JToggleButton();
        LabelMosaicoGenerado = new javax.swing.JLabel();
        PanelMosaicoGenerado = new javax.swing.JPanel();
        BarraMenu = new javax.swing.JMenuBar();
        MenuArchivo = new javax.swing.JMenu();
        GuardarMosaico = new javax.swing.JMenuItem();
        MenuPreferencias = new javax.swing.JMenu();
        Opciones = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generador de Fotomosaicos | Rafael Vasquez & Raquel Escalante");

        UbicacionPelicula.setFocusable(false);

        LabeUbicacionlPelicula.setText("Ubicación de Película:");

        LabelImagenObjetivo.setText("Imagen Objetivo:");

        PanelImagenObjetivo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout PanelImagenObjetivoLayout = new javax.swing.GroupLayout(PanelImagenObjetivo);
        PanelImagenObjetivo.setLayout(PanelImagenObjetivoLayout);
        PanelImagenObjetivoLayout.setHorizontalGroup(
            PanelImagenObjetivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        PanelImagenObjetivoLayout.setVerticalGroup(
            PanelImagenObjetivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        AbrirPelicula.setText("1.Abrir Película");
        AbrirPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirPeliculaActionPerformed(evt);
            }
        });

        ElegirImagen.setText("2. Elegir Imágen");
        ElegirImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ElegirImagenActionPerformed(evt);
            }
        });

        GenerarMuestras.setText("3. Generar Muestras");

        GenerarMosaico.setText("4. Generar Mosaico");
        GenerarMosaico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarMosaicoActionPerformed(evt);
            }
        });

        LabelMosaicoGenerado.setText("Foto-Mosaico Generado:");

        PanelMosaicoGenerado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout PanelMosaicoGeneradoLayout = new javax.swing.GroupLayout(PanelMosaicoGenerado);
        PanelMosaicoGenerado.setLayout(PanelMosaicoGeneradoLayout);
        PanelMosaicoGeneradoLayout.setHorizontalGroup(
            PanelMosaicoGeneradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 565, Short.MAX_VALUE)
        );
        PanelMosaicoGeneradoLayout.setVerticalGroup(
            PanelMosaicoGeneradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 554, Short.MAX_VALUE)
        );

        MenuArchivo.setText("Archivo");

        GuardarMosaico.setText("Guardar Mosaico");
        MenuArchivo.add(GuardarMosaico);

        BarraMenu.add(MenuArchivo);

        MenuPreferencias.setText("Preferencias");

        Opciones.setText("Opciones");
        MenuPreferencias.add(Opciones);

        BarraMenu.add(MenuPreferencias);

        setJMenuBar(BarraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabeUbicacionlPelicula)
                                .addGap(43, 43, 43)
                                .addComponent(UbicacionPelicula, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AbrirPelicula)
                                .addGap(18, 18, 18)
                                .addComponent(ElegirImagen)
                                .addGap(18, 18, 18)
                                .addComponent(GenerarMuestras)
                                .addGap(0, 18, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GenerarMosaico))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LabelImagenObjetivo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(PanelImagenObjetivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelMosaicoGenerado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelMosaicoGenerado))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UbicacionPelicula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabeUbicacionlPelicula))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ElegirImagen)
                            .addComponent(GenerarMosaico)
                            .addComponent(AbrirPelicula)
                            .addComponent(GenerarMuestras))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LabelImagenObjetivo)
                        .addGap(8, 8, 8)
                        .addComponent(PanelImagenObjetivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(LabelMosaicoGenerado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PanelMosaicoGenerado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateMoviePathGUI(String path){
        moviePath = path;
        UbicacionPelicula.setText(path);
    }
    
    private void updateTargetImageGUI(BufferedImage imgTg){
        int mWidth, mHeight;
        if(imgTg.getWidth() > imgTg.getHeight()){
            mWidth = jScrollPane1.getWidth() - 10;
            mHeight = (int)(((double)mWidth / (double)imgTg.getWidth()) * (double)imgTg.getHeight());
        }else{
            mHeight = jScrollPane1.getHeight() - 10;
            mWidth = (mHeight / imgTg.getHeight()) * imgTg.getWidth();
        }

        BufferedImage myResize = new BufferedImage(mWidth, mHeight, imgTg.getType());
        Graphics2D g = myResize.createGraphics();
        g.drawImage(imgTg, 0, 0, mWidth, mHeight, null);
        g.dispose();

        ImageIcon icon = new ImageIcon(myResize);
        // Adding the ImageIcon to the Label.
        targetImageLabel.setIcon( icon );
        //Aligning the image to the center.
        targetImageLabel.setHorizontalAlignment(JLabel.CENTER);
        //Adding the label to the Scrolling pane.
        jScrollPane1.getViewport().add(targetImageLabel);
        // Repainting the scroll pane to update the changes
        jScrollPane1.repaint();
        
    }
    
    private int[] extractFeaturesPerBlock(int numberFeatures, int[] pixelData){
        int[] featuresArray = new int[numberFeatures];
        
        return featuresArray;
    }
    
    private void ElegirImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ElegirImagenActionPerformed
        if (!"".equals(moviePath)){
            int returnVal = fcOpenPic.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fcOpenPic.getSelectedFile();
                try {
                    // Filling BufferedImage with file information
                    targetImage = ImageIO.read(file);
                    updateTargetImageGUI(targetImage);
                } catch (IOException e) {
                    // Report exceptions
                    JOptionPane.showMessageDialog(this, "Error al escoger Imagen Objetivo!");
                }
            } 
        }else{
            JOptionPane.showMessageDialog(this, "¡ERROR: Escoja una película primero!");
        }
    }//GEN-LAST:event_ElegirImagenActionPerformed

    private void AbrirPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirPeliculaActionPerformed
       //In response to a button click, the file chooser is displayed
        int returnVal = fcOpenMovie.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                grabber.release();
                String path = fcOpenMovie.getSelectedFile().getAbsolutePath();
                updateMoviePathGUI(path);
                grabber = new FFmpegFrameGrabber(path);
                grabber.start();
            } catch (FrameGrabber.Exception ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_AbrirPeliculaActionPerformed

    private void GenerarMosaicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarMosaicoActionPerformed
        // 1- Target image gets divided into NxM Blocks and the features extraction of target image and sample images is performed.
//        int numberFeatures = featuresPerBlockHeight * featuresPerBlockWidth * 3 + 1;
//        int numberBlocks = heightBlocks * widthBlocks;
//        double blockWidth = (double)targetImage.getWidth() / (double)widthBlocks;
//        double blockHeight = (double)targetImage.getHeight() / (double)heightBlocks;
//        int[] pixelData;
//        //targetImage.getRGB(0,0,10,10,pixelData,0,10);
//        targetImageFeatures = new int[numberBlocks][numberFeatures];
//        sampleImagesFeatures = new int[numberSamples][numberFeatures];
//        
//        for (int i = 0; i < heightBlocks; i++){
//            for (int j = 0; j < widthBlocks; j++){
//                int w, h;
//                
//                if(j == widthBlocks-1)
//                    w = targetImage.getWidth() - (widthBlocks-1)* (int)blockWidth;
//                else
//                    w = (int)blockWidth;
//                
//                if(i == heightBlocks-1){
//                    h = targetImage.getHeight() - (heightBlocks-1)* (int)blockHeight;
//                }else
//                    h = (int)blockHeight;
//                
//                pixelData = new int[w*h];
//                targetImage.getRGB((int)blockWidth * j, (int)blockHeight * i, w, h, pixelData, 0, w);
//                
//                targetImageFeatures[i*widthBlocks + j] = extractFeaturesPerBlock(numberFeatures, pixelData);
//            }
//        }
        
        
        // 2- The sample images get matched to the target images blocks
        
        // 3- Color Adjustment of sample images to improve quality.
    }//GEN-LAST:event_GenerarMosaicoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MyGUI().setVisible(true);
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton AbrirPelicula;
    private javax.swing.JMenuBar BarraMenu;
    private javax.swing.JButton ElegirImagen;
    private javax.swing.JToggleButton GenerarMosaico;
    private javax.swing.JToggleButton GenerarMuestras;
    private javax.swing.JMenuItem GuardarMosaico;
    private javax.swing.JLabel LabeUbicacionlPelicula;
    private javax.swing.JLabel LabelImagenObjetivo;
    private javax.swing.JLabel LabelMosaicoGenerado;
    private javax.swing.JMenu MenuArchivo;
    private javax.swing.JMenu MenuPreferencias;
    private javax.swing.JMenuItem Opciones;
    private javax.swing.JPanel PanelImagenObjetivo;
    private javax.swing.JPanel PanelMosaicoGenerado;
    private javax.swing.JTextField UbicacionPelicula;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
